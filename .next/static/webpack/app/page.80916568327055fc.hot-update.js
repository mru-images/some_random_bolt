"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/page.tsx":
/*!**********************!*\
  !*** ./app/page.tsx ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ MusicPlayerApp; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _barrel_optimize_names_Home_Search_Settings_lucide_react__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! __barrel_optimize__?names=Home,Search,Settings!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/home.js\");\n/* harmony import */ var _barrel_optimize_names_Home_Search_Settings_lucide_react__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! __barrel_optimize__?names=Home,Search,Settings!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/search.js\");\n/* harmony import */ var _barrel_optimize_names_Home_Search_Settings_lucide_react__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! __barrel_optimize__?names=Home,Search,Settings!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/settings.js\");\n/* harmony import */ var _components_HomePage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/components/HomePage */ \"(app-pages-browser)/./components/HomePage.tsx\");\n/* harmony import */ var _components_SearchPage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/SearchPage */ \"(app-pages-browser)/./components/SearchPage.tsx\");\n/* harmony import */ var _components_SettingsPage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/components/SettingsPage */ \"(app-pages-browser)/./components/SettingsPage.tsx\");\n/* harmony import */ var _components_PlaylistsPage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components/PlaylistsPage */ \"(app-pages-browser)/./components/PlaylistsPage.tsx\");\n/* harmony import */ var _components_LikedSongsPage__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/components/LikedSongsPage */ \"(app-pages-browser)/./components/LikedSongsPage.tsx\");\n/* harmony import */ var _components_MinimizedPlayer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/components/MinimizedPlayer */ \"(app-pages-browser)/./components/MinimizedPlayer.tsx\");\n/* harmony import */ var _components_MaximizedPlayer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/components/MaximizedPlayer */ \"(app-pages-browser)/./components/MaximizedPlayer.tsx\");\n/* harmony import */ var _components_CreatePlaylistModal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/components/CreatePlaylistModal */ \"(app-pages-browser)/./components/CreatePlaylistModal.tsx\");\n/* harmony import */ var _components_AddToPlaylistModal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/components/AddToPlaylistModal */ \"(app-pages-browser)/./components/AddToPlaylistModal.tsx\");\n/* harmony import */ var _components_AuthWrapper__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @/components/AuthWrapper */ \"(app-pages-browser)/./components/AuthWrapper.tsx\");\n/* harmony import */ var _hooks_useAuth__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @/hooks/useAuth */ \"(app-pages-browser)/./hooks/useAuth.ts\");\n/* harmony import */ var _hooks_useSupabaseData__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @/hooks/useSupabaseData */ \"(app-pages-browser)/./hooks/useSupabaseData.ts\");\n/* harmony import */ var _hooks_useQueue__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @/hooks/useQueue */ \"(app-pages-browser)/./hooks/useQueue.ts\");\n/* harmony import */ var _components_ThemeContext__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @/components/ThemeContext */ \"(app-pages-browser)/./components/ThemeContext.tsx\");\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! react-hot-toast */ \"(app-pages-browser)/./node_modules/react-hot-toast/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction MusicPlayerContent() {\n    _s();\n    const { user } = (0,_hooks_useAuth__WEBPACK_IMPORTED_MODULE_12__.useAuth)();\n    const { songs, playlists, likedSongs, lastPlayedSong, loading, toggleLike, createPlaylist, deletePlaylist, renamePlaylist, addSongToPlaylist, removeSongFromPlaylist, recordListeningHistory, stopCurrentSongTracking, getPersonalizedSongs } = (0,_hooks_useSupabaseData__WEBPACK_IMPORTED_MODULE_13__.useSupabaseData)(user);\n    const { queue, addToQueue, removeFromQueue, getNextSongFromQueue, clearQueue, hasQueue } = (0,_hooks_useQueue__WEBPACK_IMPORTED_MODULE_14__.useQueue)();\n    const [activeTab, setActiveTab] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"home\");\n    const [currentPage, setCurrentPage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"main\");\n    const [currentSong, setCurrentSong] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isPlaying, setIsPlaying] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isPlayerMaximized, setIsPlayerMaximized] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [showCreatePlaylistModal, setShowCreatePlaylistModal] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [showAddToPlaylistModal, setShowAddToPlaylistModal] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [selectedSongForPlaylist, setSelectedSongForPlaylist] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [hasSetLastPlayedSong, setHasSetLastPlayedSong] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [lastPlayedSongDismissed, setLastPlayedSongDismissed] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const { isDarkMode, toggleTheme } = (0,_components_ThemeContext__WEBPACK_IMPORTED_MODULE_15__.useTheme)();\n    const [displayCount, setDisplayCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(15);\n    const [imageUrls, setImageUrls] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [audioUrl, setAudioUrl] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const audioRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [currentTime, setCurrentTime] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [duration, setDuration] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [volume, setVolume] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0.75); // default 75%\n    const [isSeeking, setIsSeeking] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [pendingSeekTime, setPendingSeekTime] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isExternallySeeking, setIsExternallySeeking] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [recommendedQueue, setRecommendedQueue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [playedSongs, setPlayedSongs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Set());\n    const [personalizedList, setPersonalizedList] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentSongIndex, setCurrentSongIndex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const loadMoreSongs = ()=>{\n        setDisplayCount((prev)=>prev + 15);\n    };\n    const displayedSongs = songs.slice(0, displayCount);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const loadAudio = async ()=>{\n            if (currentSong === null || currentSong === void 0 ? void 0 : currentSong.file_id) {\n                const url = \"/api/audio-proxy?fileid=\".concat(currentSong.file_id);\n                setAudioUrl(url);\n                setDuration(0);\n                setCurrentTime(0);\n                setPendingSeekTime(null);\n            }\n        };\n        loadAudio();\n    }, [\n        currentSong === null || currentSong === void 0 ? void 0 : currentSong.file_id\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const fetchRecommendations = async ()=>{\n            if (user && currentSong) {\n                const recommendations = await getPersonalizedSongs(user.id, currentSong);\n                console.log(\"\\uD83C\\uDFA7 Updated Recommendations:\", recommendations);\n            }\n        };\n        fetchRecommendations();\n    }, [\n        user,\n        currentSong\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (audioRef.current) {\n            audioRef.current.volume = volume;\n        }\n    }, [\n        volume\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const audio = audioRef.current;\n        if (!audio) return;\n        if (!isNaN(audio.duration) && isPlaying) {\n            // Duration is valid, safe to play\n            audio.play().catch((e)=>{\n                console.error(\"Playback error:\", e);\n            });\n        } else if (!isPlaying) {\n            audio.pause();\n        }\n    }, [\n        isPlaying\n    ]);\n    // Load images for currently displayed songs\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const fetchImages = async ()=>{\n            const newUrls = {};\n            // Songs from the main feed\n            const songsToLoad = songs.slice(0, displayCount);\n            for (const song of songsToLoad){\n                if (!imageUrls[song.id]) {\n                    newUrls[song.id] = \"/api/image-proxy?fileid=\".concat(song.img_id);\n                }\n            }\n            // Songs from playlists\n            for (const playlist of playlists){\n                for (const song of playlist.songs){\n                    if (!imageUrls[song.id]) {\n                        newUrls[song.id] = \"/api/image-proxy?fileid=\".concat(song.img_id);\n                    }\n                }\n            }\n            // Liked songs\n            for (const song of likedSongs){\n                if (!imageUrls[song.id]) {\n                    newUrls[song.id] = \"/api/image-proxy?fileid=\".concat(song.img_id);\n                }\n            }\n            // Apply if new URLs found\n            if (Object.keys(newUrls).length > 0) {\n                setImageUrls((prev)=>({\n                        ...prev,\n                        ...newUrls\n                    }));\n            }\n        };\n        fetchImages();\n    }, [\n        displayCount,\n        songs,\n        playlists,\n        likedSongs\n    ]);\n    // Set last played song as current song when data loads (only once and if not dismissed)\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const loadLastPlayedImage = async ()=>{\n            if (user && lastPlayedSong && !hasSetLastPlayedSong && !lastPlayedSongDismissed) {\n                const initialRecs = await getPersonalizedSongs(user.id, lastPlayedSong);\n                const filtered = initialRecs.filter((song)=>!playedSongs.has(song.file_id));\n                setPersonalizedList([\n                    lastPlayedSong,\n                    ...filtered.slice(0, 5)\n                ]);\n                setCurrentSong(lastPlayedSong);\n                setHasSetLastPlayedSong(true);\n                if (!imageUrls[lastPlayedSong.img_id]) {\n                    const url = \"/api/image-proxy?fileid=\".concat(lastPlayedSong.img_id);\n                    setImageUrls((prev)=>({\n                            ...prev,\n                            [lastPlayedSong.img_id]: url\n                        }));\n                }\n            }\n        };\n        loadLastPlayedImage();\n    }, [\n        lastPlayedSong,\n        currentSong,\n        hasSetLastPlayedSong,\n        lastPlayedSongDismissed,\n        imageUrls\n    ]);\n    const handleSongPlay = async (song)=>{\n        setCurrentSong(song);\n        setIsPlaying(true);\n        setLastPlayedSongDismissed(false);\n        recordListeningHistory(song.id);\n        setPlayedSongs((prev)=>{\n            const updated = new Set(prev);\n            updated.add(String(song.file_id));\n            return updated;\n        });\n        if (user) {\n            const recs = await getPersonalizedSongs(user.id, song);\n            const filtered = recs.filter((s)=>!playedSongs.has(s.file_id));\n            const newPersonalizedList = [\n                song,\n                ...filtered.slice(0, 9)\n            ]; // Get more songs\n            setPersonalizedList(newPersonalizedList);\n            setCurrentSongIndex(0); // Reset to first song\n        }\n    };\n    const handleAddToQueue = (song)=>{\n        addToQueue(song);\n        react_hot_toast__WEBPACK_IMPORTED_MODULE_16__.toast.success('Added \"'.concat(song.name, '\" to queue'));\n    };\n    const togglePlay = ()=>{\n        setIsPlaying(!isPlaying);\n    };\n    const togglePlayerSize = ()=>{\n        setIsPlayerMaximized(!isPlayerMaximized);\n    };\n    const closePlayer = async ()=>{\n        // Stop tracking current song before closing\n        await stopCurrentSongTracking();\n        setCurrentSong(null);\n        setIsPlaying(false);\n        setIsPlayerMaximized(false);\n        // Mark last played song as dismissed so it won't auto-load again\n        setLastPlayedSongDismissed(true);\n    };\n    const handleToggleLike = (songId)=>{\n        toggleLike(songId);\n        // Update current song state if it's the one being liked/unliked\n        if (currentSong && currentSong.id === songId) {\n            setCurrentSong((prev)=>prev ? {\n                    ...prev,\n                    isLiked: !prev.isLiked\n                } : null);\n        }\n    };\n    const handlePrevious = ()=>{\n        if (!currentSong) return;\n        // Check if there's a previous song in the personalized list\n        if (currentSongIndex > 0) {\n            const prevIndex = currentSongIndex - 1;\n            const prevSong = personalizedList[prevIndex];\n            if (prevSong) {\n                setCurrentSong(prevSong);\n                setCurrentSongIndex(prevIndex);\n                setIsPlaying(true);\n                setLastPlayedSongDismissed(false);\n                recordListeningHistory(prevSong.id);\n                setPlayedSongs((prev)=>{\n                    const updated = new Set(prev);\n                    updated.add(String(prevSong.file_id));\n                    return updated;\n                });\n                // Preload image\n                if (!imageUrls[prevSong.img_id]) {\n                    const newUrl = \"/api/image-proxy?fileid=\".concat(prevSong.img_id);\n                    setImageUrls((prev)=>({\n                            ...prev,\n                            [prevSong.img_id]: newUrl\n                        }));\n                }\n            }\n        } else {\n            // If at the beginning, just restart current song\n            setCurrentTime(0);\n            setIsPlaying(true);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!currentSong) return;\n        const currentIndex = songs.findIndex((song)=>song.id === currentSong.id);\n        const nextIndex = currentIndex < songs.length - 1 ? currentIndex + 1 : 0;\n        const nextSong = songs[nextIndex];\n        // Preload next song image if not in cache\n        if (nextSong && !imageUrls[nextSong.img_id]) {\n            const newUrl = \"/api/image-proxy?fileid=\".concat(nextSong.img_id);\n            setImageUrls((prev)=>({\n                    ...prev,\n                    [nextSong.img_id]: newUrl\n                }));\n        }\n    }, [\n        currentSong,\n        songs\n    ]);\n    const handleLoadedMetadata = async ()=>{\n        const audio = audioRef.current;\n        if (!audio) return;\n        const loadedDuration = audio.duration;\n        if (!isNaN(loadedDuration) && isFinite(loadedDuration)) {\n            setDuration(loadedDuration);\n            if (pendingSeekTime !== null) {\n                audio.currentTime = pendingSeekTime;\n                setCurrentTime(pendingSeekTime);\n                setPendingSeekTime(null);\n            } else {\n                setCurrentTime(audio.currentTime);\n            }\n            try {\n                if (isPlaying) {\n                    await audio.play();\n                }\n            } catch (err) {\n                console.error(\"Auto-play error after metadata load:\", err);\n            }\n        } else {\n            // Retry metadata read\n            setTimeout(handleLoadedMetadata, 100);\n        }\n    };\n    const handleNext = async ()=>{\n        if (!currentSong) return;\n        // Check if there's a song in the queue first\n        const nextQueueSong = getNextSongFromQueue();\n        if (nextQueueSong) {\n            setCurrentSong(nextQueueSong);\n            setIsPlaying(true);\n            setLastPlayedSongDismissed(false);\n            recordListeningHistory(nextQueueSong.id);\n            // Update personalized list with the queue song\n            if (user) {\n                const recs = await getPersonalizedSongs(user.id, nextQueueSong);\n                const filtered = recs.filter((s)=>!playedSongs.has(s.file_id));\n                const newPersonalizedList = [\n                    nextQueueSong,\n                    ...filtered.slice(0, 9)\n                ];\n                setPersonalizedList(newPersonalizedList);\n                setCurrentSongIndex(0);\n            }\n            // Preload image\n            if (!imageUrls[nextQueueSong.img_id]) {\n                const newUrl = \"/api/image-proxy?fileid=\".concat(nextQueueSong.img_id);\n                setImageUrls((prev)=>({\n                        ...prev,\n                        [nextQueueSong.img_id]: newUrl\n                    }));\n            }\n            return;\n        }\n        // If no queue, proceed with personalized list\n        const nextIndex = currentSongIndex + 1;\n        if (nextIndex < personalizedList.length) {\n            const nextSong = personalizedList[nextIndex];\n            setCurrentSong(nextSong);\n            setCurrentSongIndex(nextIndex);\n            setIsPlaying(true);\n            setLastPlayedSongDismissed(false);\n            recordListeningHistory(nextSong.id);\n            setPlayedSongs((prev)=>{\n                const updated = new Set(prev);\n                updated.add(String(nextSong.file_id));\n                return updated;\n            });\n            // Preload image\n            if (!imageUrls[nextSong.img_id]) {\n                const newUrl = \"/api/image-proxy?fileid=\".concat(nextSong.img_id);\n                setImageUrls((prev)=>({\n                        ...prev,\n                        [nextSong.img_id]: newUrl\n                    }));\n            }\n            // If nearing end of list, fetch more recommendations\n            if (nextIndex >= personalizedList.length - 3 && user) {\n                const newRecs = await getPersonalizedSongs(user.id, nextSong);\n                const filtered = newRecs.filter((song)=>!playedSongs.has(song.file_id));\n                if (filtered.length > 0) {\n                    setPersonalizedList((prev)=>[\n                            ...prev,\n                            ...filtered.slice(0, 6)\n                        ]);\n                }\n            }\n        } else {\n            // If we've reached the end of personalized list, get new recommendations\n            if (user && currentSong) {\n                const newRecs = await getPersonalizedSongs(user.id, currentSong);\n                const filtered = newRecs.filter((song)=>!playedSongs.has(song.file_id));\n                if (filtered.length > 0) {\n                    const nextSong = filtered[0];\n                    setCurrentSong(nextSong);\n                    setIsPlaying(true);\n                    setLastPlayedSongDismissed(false);\n                    recordListeningHistory(nextSong.id);\n                    // Create new personalized list starting with this song\n                    const newPersonalizedList = [\n                        nextSong,\n                        ...filtered.slice(1, 10)\n                    ];\n                    setPersonalizedList(newPersonalizedList);\n                    setCurrentSongIndex(0);\n                    setPlayedSongs((prev)=>{\n                        const updated = new Set(prev);\n                        updated.add(String(nextSong.file_id));\n                        return updated;\n                    });\n                    // Preload image\n                    if (!imageUrls[nextSong.img_id]) {\n                        const newUrl = \"/api/image-proxy?fileid=\".concat(nextSong.img_id);\n                        setImageUrls((prev)=>({\n                                ...prev,\n                                [nextSong.img_id]: newUrl\n                            }));\n                    }\n                }\n            }\n        }\n    };\n    const formatNumber = (num)=>{\n        if (num >= 1000000) {\n            return (num / 1000000).toFixed(1) + \"M\";\n        } else if (num >= 1000) {\n            return (num / 1000).toFixed(1) + \"K\";\n        }\n        return num.toString();\n    };\n    const handleAddToPlaylist = (song)=>{\n        setSelectedSongForPlaylist(song);\n        setShowAddToPlaylistModal(true);\n    };\n    const handleSongEnd = async ()=>{\n        // When a song ends, automatically play the next one\n        await handleNext();\n    };\n    const renderContent = ()=>{\n        if (currentPage === \"playlists\") {\n            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_PlaylistsPage__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                playlists: playlists,\n                onBack: ()=>setCurrentPage(\"main\"),\n                onSongPlay: handleSongPlay,\n                onAddToQueue: handleAddToQueue,\n                onCreatePlaylist: ()=>setShowCreatePlaylistModal(true),\n                onDeletePlaylist: deletePlaylist,\n                onRenamePlaylist: renamePlaylist,\n                onRemoveSongFromPlaylist: removeSongFromPlaylist,\n                imageUrls: imageUrls\n            }, void 0, false, {\n                fileName: \"/home/project/app/page.tsx\",\n                lineNumber: 450,\n                columnNumber: 9\n            }, this);\n        }\n        if (currentPage === \"liked\") {\n            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_LikedSongsPage__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                songs: likedSongs,\n                onBack: ()=>setCurrentPage(\"main\"),\n                onSongPlay: handleSongPlay,\n                onAddToQueue: handleAddToQueue,\n                imageUrls: imageUrls\n            }, void 0, false, {\n                fileName: \"/home/project/app/page.tsx\",\n                lineNumber: 465,\n                columnNumber: 14\n            }, this);\n        }\n        switch(activeTab){\n            case \"home\":\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_HomePage__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                    songs: displayedSongs,\n                    onSongPlay: handleSongPlay,\n                    formatNumber: formatNumber,\n                    onAddToPlaylist: handleAddToPlaylist,\n                    onAddToQueue: handleAddToQueue,\n                    imageUrls: imageUrls,\n                    onLoadMore: loadMoreSongs,\n                    hasMoreSongs: displayCount < songs.length\n                }, void 0, false, {\n                    fileName: \"/home/project/app/page.tsx\",\n                    lineNumber: 470,\n                    columnNumber: 16\n                }, this);\n            case \"search\":\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_SearchPage__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                    songs: songs,\n                    onSongPlay: handleSongPlay,\n                    formatNumber: formatNumber,\n                    onAddToPlaylist: handleAddToPlaylist,\n                    onAddToQueue: handleAddToQueue,\n                    imageUrls: imageUrls,\n                    setImageUrls: setImageUrls\n                }, void 0, false, {\n                    fileName: \"/home/project/app/page.tsx\",\n                    lineNumber: 481,\n                    columnNumber: 16\n                }, this);\n            case \"settings\":\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_SettingsPage__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                    onPlaylistsClick: ()=>setCurrentPage(\"playlists\"),\n                    onLikedClick: ()=>setCurrentPage(\"liked\")\n                }, void 0, false, {\n                    fileName: \"/home/project/app/page.tsx\",\n                    lineNumber: 491,\n                    columnNumber: 16\n                }, this);\n            default:\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_HomePage__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                    songs: displayedSongs,\n                    onSongPlay: handleSongPlay,\n                    formatNumber: formatNumber,\n                    onAddToPlaylist: handleAddToPlaylist,\n                    onAddToQueue: handleAddToQueue,\n                    imageUrls: imageUrls,\n                    onLoadMore: loadMoreSongs,\n                    hasMoreSongs: displayCount < songs.length\n                }, void 0, false, {\n                    fileName: \"/home/project/app/page.tsx\",\n                    lineNumber: 493,\n                    columnNumber: 16\n                }, this);\n        }\n    };\n    const themeClasses = isDarkMode ? \"bg-gray-900 text-white\" : \"bg-gray-50 text-gray-900\";\n    const setCurrentTimeState = setCurrentTime;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"min-h-screen \".concat(themeClasses, \" relative overflow-hidden\"),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"transition-all duration-300 \".concat(currentSong ? \"pb-36\" : \"pb-20\"),\n                children: renderContent()\n            }, void 0, false, {\n                fileName: \"/home/project/app/page.tsx\",\n                lineNumber: 515,\n                columnNumber: 9\n            }, this),\n            currentPage === \"main\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"fixed bottom-0 left-0 right-0 \".concat(isDarkMode ? \"bg-gray-800 border-gray-700\" : \"bg-white border-gray-200\", \" border-t z-30\"),\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex items-center justify-around py-3\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: ()=>setActiveTab(\"home\"),\n                            className: \"flex flex-col items-center space-y-1 p-2 transition-colors \".concat(activeTab === \"home\" ? \"text-purple-400\" : isDarkMode ? \"text-gray-400\" : \"text-gray-600\"),\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Home_Search_Settings_lucide_react__WEBPACK_IMPORTED_MODULE_17__[\"default\"], {\n                                    size: 24\n                                }, void 0, false, {\n                                    fileName: \"/home/project/app/page.tsx\",\n                                    lineNumber: 529,\n                                    columnNumber: 17\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: \"text-xs\",\n                                    children: \"Home\"\n                                }, void 0, false, {\n                                    fileName: \"/home/project/app/page.tsx\",\n                                    lineNumber: 530,\n                                    columnNumber: 17\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/home/project/app/page.tsx\",\n                            lineNumber: 523,\n                            columnNumber: 15\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: ()=>setActiveTab(\"search\"),\n                            className: \"flex flex-col items-center space-y-1 p-2 transition-colors \".concat(activeTab === \"search\" ? \"text-purple-400\" : isDarkMode ? \"text-gray-400\" : \"text-gray-600\"),\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Home_Search_Settings_lucide_react__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n                                    size: 24\n                                }, void 0, false, {\n                                    fileName: \"/home/project/app/page.tsx\",\n                                    lineNumber: 538,\n                                    columnNumber: 17\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: \"text-xs\",\n                                    children: \"Search\"\n                                }, void 0, false, {\n                                    fileName: \"/home/project/app/page.tsx\",\n                                    lineNumber: 539,\n                                    columnNumber: 17\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/home/project/app/page.tsx\",\n                            lineNumber: 532,\n                            columnNumber: 15\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: ()=>setActiveTab(\"settings\"),\n                            className: \"flex flex-col items-center space-y-1 p-2 transition-colors \".concat(activeTab === \"settings\" ? \"text-purple-400\" : isDarkMode ? \"text-gray-400\" : \"text-gray-600\"),\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Home_Search_Settings_lucide_react__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n                                    size: 24\n                                }, void 0, false, {\n                                    fileName: \"/home/project/app/page.tsx\",\n                                    lineNumber: 547,\n                                    columnNumber: 17\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: \"text-xs\",\n                                    children: \"Settings\"\n                                }, void 0, false, {\n                                    fileName: \"/home/project/app/page.tsx\",\n                                    lineNumber: 548,\n                                    columnNumber: 17\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/home/project/app/page.tsx\",\n                            lineNumber: 541,\n                            columnNumber: 15\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/home/project/app/page.tsx\",\n                    lineNumber: 522,\n                    columnNumber: 13\n                }, this)\n            }, void 0, false, {\n                fileName: \"/home/project/app/page.tsx\",\n                lineNumber: 521,\n                columnNumber: 11\n            }, this),\n            currentSong && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                children: !isPlayerMaximized ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_MinimizedPlayer__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    song: currentSong,\n                    isPlaying: isPlaying,\n                    imageUrl: imageUrls[currentSong.img_id],\n                    onTogglePlay: togglePlay,\n                    onMaximize: togglePlayerSize,\n                    onPrevious: handlePrevious,\n                    onNext: handleNext,\n                    onClose: closePlayer,\n                    onToggleLike: ()=>handleToggleLike(currentSong.id),\n                    formatNumber: formatNumber,\n                    currentTime: currentTime,\n                    duration: duration\n                }, void 0, false, {\n                    fileName: \"/home/project/app/page.tsx\",\n                    lineNumber: 558,\n                    columnNumber: 15\n                }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_MaximizedPlayer__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                    song: currentSong,\n                    isPlaying: isPlaying,\n                    imageUrl: imageUrls[currentSong.img_id],\n                    onTogglePlay: togglePlay,\n                    onMinimize: togglePlayerSize,\n                    onPrevious: handlePrevious,\n                    onNext: handleNext,\n                    onToggleLike: ()=>handleToggleLike(currentSong.id),\n                    formatNumber: formatNumber,\n                    onAddToPlaylist: ()=>handleAddToPlaylist(currentSong),\n                    currentTime: currentTime,\n                    duration: duration,\n                    setCurrentTime: (seekTime)=>{\n                        if (audioRef.current && !isNaN(audioRef.current.duration)) {\n                            setIsExternallySeeking(true);\n                            audioRef.current.currentTime = seekTime;\n                            setCurrentTimeState(seekTime);\n                            setTimeout(()=>setIsExternallySeeking(false), 200);\n                        } else {\n                            setPendingSeekTime(seekTime); // Will apply onLoadedMetadata\n                        }\n                    },\n                    volume: volume,\n                    setVolume: setVolume,\n                    isSeeking: isSeeking,\n                    setIsSeeking: setIsSeeking,\n                    queue: queue,\n                    onRemoveFromQueue: removeFromQueue,\n                    onSongPlay: handleSongPlay,\n                    imageUrls: imageUrls\n                }, void 0, false, {\n                    fileName: \"/home/project/app/page.tsx\",\n                    lineNumber: 573,\n                    columnNumber: 15\n                }, this)\n            }, void 0, false),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_CreatePlaylistModal__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                isOpen: showCreatePlaylistModal,\n                onClose: ()=>setShowCreatePlaylistModal(false),\n                onCreatePlaylist: createPlaylist\n            }, void 0, false, {\n                fileName: \"/home/project/app/page.tsx\",\n                lineNumber: 614,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_AddToPlaylistModal__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                isOpen: showAddToPlaylistModal,\n                onClose: ()=>{\n                    setShowAddToPlaylistModal(false);\n                    setSelectedSongForPlaylist(null);\n                },\n                song: selectedSongForPlaylist,\n                playlists: playlists,\n                onAddToPlaylist: addSongToPlaylist,\n                onCreatePlaylist: ()=>{\n                    setShowAddToPlaylistModal(false);\n                    setShowCreatePlaylistModal(true);\n                },\n                imageUrls: imageUrls,\n                setImageUrls: setImageUrls\n            }, void 0, false, {\n                fileName: \"/home/project/app/page.tsx\",\n                lineNumber: 620,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"audio\", {\n                ref: audioRef,\n                src: audioUrl !== null && audioUrl !== void 0 ? audioUrl : undefined,\n                onEnded: handleSongEnd,\n                onTimeUpdate: ()=>{\n                    if (audioRef.current && !isSeeking && !isExternallySeeking) {\n                        const current = audioRef.current.currentTime;\n                        // Only update state if the difference is significant\n                        if (Math.abs(currentTime - current) > 0.25) {\n                            setCurrentTime(current);\n                        }\n                    }\n                },\n                onLoadedMetadata: handleLoadedMetadata,\n                onVolumeChange: ()=>{\n                    if (audioRef.current) {\n                        setVolume(audioRef.current.volume);\n                    }\n                },\n                style: {\n                    display: \"none\"\n                }\n            }, void 0, false, {\n                fileName: \"/home/project/app/page.tsx\",\n                lineNumber: 636,\n                columnNumber: 9\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/home/project/app/page.tsx\",\n        lineNumber: 513,\n        columnNumber: 7\n    }, this);\n}\n_s(MusicPlayerContent, \"G3MQZ7CmZmEzQAiEpM3jJr0Ql7M=\", false, function() {\n    return [\n        _hooks_useAuth__WEBPACK_IMPORTED_MODULE_12__.useAuth,\n        _hooks_useSupabaseData__WEBPACK_IMPORTED_MODULE_13__.useSupabaseData,\n        _hooks_useQueue__WEBPACK_IMPORTED_MODULE_14__.useQueue,\n        _components_ThemeContext__WEBPACK_IMPORTED_MODULE_15__.useTheme\n    ];\n});\n_c = MusicPlayerContent;\nfunction MusicPlayerApp() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_AuthWrapper__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_hot_toast__WEBPACK_IMPORTED_MODULE_16__.Toaster, {\n                position: \"bottom-center\"\n            }, void 0, false, {\n                fileName: \"/home/project/app/page.tsx\",\n                lineNumber: 667,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MusicPlayerContent, {}, void 0, false, {\n                fileName: \"/home/project/app/page.tsx\",\n                lineNumber: 668,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/home/project/app/page.tsx\",\n        lineNumber: 666,\n        columnNumber: 5\n    }, this);\n}\n_c1 = MusicPlayerApp;\nvar _c, _c1;\n$RefreshReg$(_c, \"MusicPlayerContent\");\n$RefreshReg$(_c1, \"MusicPlayerApp\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./hooks/useSupabaseData.ts":
/*!**********************************!*\
  !*** ./hooks/useSupabaseData.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSupabaseData: function() { return /* binding */ useSupabaseData; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase */ \"(app-pages-browser)/./lib/supabase.ts\");\n\n\nfunction useSupabaseData(user) {\n    const [songs, setSongs] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [playlists, setPlaylists] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [likedSongs, setLikedSongs] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(new Set());\n    const [lastPlayedSong, setLastPlayedSong] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [currentSongStartTime, setCurrentSongStartTime] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const currentSongRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    // Convert database song to UI song format\n    const convertDatabaseSong = function(dbSong) {\n        let isLiked = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        return {\n            file_id: dbSong.file_id,\n            img_id: dbSong.img_id,\n            name: dbSong.name,\n            artist: dbSong.artist,\n            language: dbSong.language,\n            tags: dbSong.tags,\n            views: dbSong.views,\n            likes: dbSong.likes,\n            id: dbSong.file_id.toString(),\n            image: \"https://images.pexels.com/photos/\".concat(dbSong.img_id, \"/pexels-photo-\").concat(dbSong.img_id, \".jpeg?auto=compress&cs=tinysrgb&w=300\"),\n            isLiked\n        };\n    };\n    // Fetch all songs\n    const fetchSongs = async ()=>{\n        if (!user) {\n            setSongs([]);\n            return;\n        }\n        try {\n            const { data: songsData, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"songs\").select(\"*\").order(\"views\", {\n                ascending: false\n            });\n            if (error) throw error;\n            let userLikedSongs = new Set();\n            const { data: likedData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"liked_songs\").select(\"song_id\").eq(\"user_id\", user.id);\n            if (likedData) {\n                userLikedSongs = new Set(likedData.map((item)=>item.song_id));\n                setLikedSongs(userLikedSongs);\n            }\n            const convertedSongs = (songsData === null || songsData === void 0 ? void 0 : songsData.map((song)=>convertDatabaseSong(song, userLikedSongs.has(song.file_id)))) || [];\n            const sortedSongs = [\n                ...convertedSongs\n            ].sort((a, b)=>{\n                const aScore = a.views + a.likes;\n                const bScore = b.views + b.likes;\n                return bScore - aScore;\n            });\n            setSongs(sortedSongs);\n            const { data: userData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"users\").select(\"last_song_file_id\").eq(\"id\", user.id).single();\n            if (userData === null || userData === void 0 ? void 0 : userData.last_song_file_id) {\n                const lastSong = convertedSongs.find((song)=>song.file_id === userData.last_song_file_id);\n                if (lastSong) {\n                    setLastPlayedSong(lastSong);\n                }\n            }\n        } catch (error) {\n            console.error(\"Error fetching songs:\", error);\n            setSongs([]) // Set empty array on error\n            ;\n        }\n    };\n    async function getPersonalizedSongs(userId, currentSong) {\n        // 1. Fetch all songs\n        const { data: songs } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"songs\").select(\"*\");\n        if (!songs) return [];\n        // 2. Fetch listening history\n        const { data: history } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"history\").select(\"*\").eq(\"user_id\", userId);\n        const historyMap = new Map(history === null || history === void 0 ? void 0 : history.map((h)=>[\n                h.song_id,\n                h.minutes_listened\n            ]));\n        const recommendations = songs.filter((song)=>song.file_id !== currentSong.file_id) // exclude current song\n        .map((song)=>{\n            let score = 0;\n            // 🎯 Tag Match\n            const matchingTags = song.tags.filter((tag)=>currentSong.tags.includes(tag));\n            score += matchingTags.length * 10;\n            // 👤 Artist Match\n            if (song.artist === currentSong.artist) {\n                score += 20;\n            }\n            // ⏱ Listening History Boost\n            const listenedMinutes = historyMap.get(song.file_id) || 0;\n            score += listenedMinutes;\n            // ❤️ Likes Boost\n            score += (song.likes || 0) / 100;\n            // 👁 Views Boost\n            score += (song.views || 0) / 1000;\n            // Add some randomness to avoid always getting the same recommendations\n            score += Math.random() * 5;\n            return {\n                song,\n                score\n            };\n        });\n        // 3. Sort and return top 10 for better variety\n        const top5 = recommendations.sort((a, b)=>b.score - a.score).slice(0, 10).map((entry)=>entry.song);\n        console.log(\"\\uD83C\\uDFB5 Personalized Top 10 Songs:\", top5);\n        return top5;\n    }\n    // Fetch user playlists\n    const fetchPlaylists = async ()=>{\n        if (!user) {\n            setPlaylists([]);\n            return;\n        }\n        try {\n            const { data: playlistsData, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"playlists\").select(\"\\n          id,\\n          name,\\n          playlist_songs (\\n            songs (*)\\n          )\\n        \").eq(\"user_id\", user.id);\n            if (error) throw error;\n            const convertedPlaylists = (playlistsData === null || playlistsData === void 0 ? void 0 : playlistsData.map((playlist)=>{\n                var _playlist_playlist_songs, _playlistSongs_;\n                const playlistSongs = ((_playlist_playlist_songs = playlist.playlist_songs) === null || _playlist_playlist_songs === void 0 ? void 0 : _playlist_playlist_songs.map((ps)=>convertDatabaseSong(ps.songs, likedSongs.has(ps.songs.file_id)))) || [];\n                return {\n                    id: playlist.id.toString(),\n                    name: playlist.name,\n                    songCount: playlistSongs.length,\n                    image: ((_playlistSongs_ = playlistSongs[0]) === null || _playlistSongs_ === void 0 ? void 0 : _playlistSongs_.image) || \"https://images.pexels.com/photos/1763075/pexels-photo-1763075.jpeg?auto=compress&cs=tinysrgb&w=300\",\n                    songs: playlistSongs\n                };\n            })) || [];\n            setPlaylists(convertedPlaylists);\n        } catch (error) {\n            console.error(\"Error fetching playlists:\", error);\n        }\n    };\n    // Toggle like song\n    const toggleLike = async (songId)=>{\n        if (!user) return;\n        const songFileId = parseInt(songId);\n        const isCurrentlyLiked = likedSongs.has(songFileId);\n        try {\n            if (isCurrentlyLiked) {\n                // Remove from liked_songs\n                const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"liked_songs\").delete().eq(\"user_id\", user.id).eq(\"song_id\", songFileId);\n                if (error) throw error;\n                // Decrement likes\n                await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.rpc(\"decrement_song_likes\", {\n                    song_file_id: songFileId\n                });\n                setLikedSongs((prev)=>{\n                    const newSet = new Set(prev);\n                    newSet.delete(songFileId);\n                    return newSet;\n                });\n            } else {\n                // Add to liked_songs\n                const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"liked_songs\").insert({\n                    user_id: user.id,\n                    song_id: songFileId\n                });\n                if (error) throw error;\n                // Increment likes\n                await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.rpc(\"increment_song_likes\", {\n                    song_file_id: songFileId\n                });\n                setLikedSongs((prev)=>new Set(prev).add(songFileId));\n            }\n            // Update songs state\n            // Update songs state\n            setSongs((prevSongs)=>prevSongs.map((song)=>song.id === songId ? {\n                        ...song,\n                        isLiked: !isCurrentlyLiked,\n                        likes: song.likes + (isCurrentlyLiked ? -1 : 1)\n                    } : song));\n            // Update playlists state\n            setPlaylists((prevPlaylists)=>prevPlaylists.map((playlist)=>({\n                        ...playlist,\n                        songs: playlist.songs.map((song)=>song.id === songId ? {\n                                ...song,\n                                isLiked: !isCurrentlyLiked,\n                                likes: song.likes + (isCurrentlyLiked ? -1 : 1)\n                            } : song)\n                    })));\n        } catch (error) {\n            console.error(\"Error toggling like:\", error);\n        }\n    };\n    // Create playlist\n    const createPlaylist = async (name)=>{\n        if (!user) return;\n        try {\n            const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"playlists\").insert({\n                user_id: user.id,\n                name\n            }).select().single();\n            if (error) throw error;\n            const newPlaylist = {\n                id: data.id.toString(),\n                name: data.name,\n                songCount: 0,\n                image: \"https://images.pexels.com/photos/1763075/pexels-photo-1763075.jpeg?auto=compress&cs=tinysrgb&w=300\",\n                songs: []\n            };\n            setPlaylists((prev)=>[\n                    ...prev,\n                    newPlaylist\n                ]);\n        } catch (error) {\n            console.error(\"Error creating playlist:\", error);\n        }\n    };\n    // Delete playlist\n    const deletePlaylist = async (playlistId)=>{\n        if (!user) return;\n        try {\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"playlists\").delete().eq(\"id\", parseInt(playlistId)).eq(\"user_id\", user.id);\n            if (error) throw error;\n            setPlaylists((prev)=>prev.filter((playlist)=>playlist.id !== playlistId));\n        } catch (error) {\n            console.error(\"Error deleting playlist:\", error);\n        }\n    };\n    // Rename playlist\n    const renamePlaylist = async (playlistId, newName)=>{\n        if (!user) return;\n        try {\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"playlists\").update({\n                name: newName\n            }).eq(\"id\", parseInt(playlistId)).eq(\"user_id\", user.id);\n            if (error) throw error;\n            setPlaylists((prev)=>prev.map((playlist)=>playlist.id === playlistId ? {\n                        ...playlist,\n                        name: newName\n                    } : playlist));\n        } catch (error) {\n            console.error(\"Error renaming playlist:\", error);\n        }\n    };\n    // Add song to playlist\n    const addSongToPlaylist = async (playlistId, song)=>{\n        if (!user) return;\n        try {\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"playlist_songs\").insert({\n                playlist_id: parseInt(playlistId),\n                song_id: song.file_id\n            });\n            if (error) throw error;\n            setPlaylists((prev)=>prev.map((playlist)=>{\n                    if (playlist.id === playlistId) {\n                        const songExists = playlist.songs.some((s)=>s.id === song.id);\n                        if (!songExists) {\n                            var _updatedSongs_;\n                            const updatedSongs = [\n                                ...playlist.songs,\n                                song\n                            ];\n                            return {\n                                ...playlist,\n                                songs: updatedSongs,\n                                songCount: updatedSongs.length,\n                                image: ((_updatedSongs_ = updatedSongs[0]) === null || _updatedSongs_ === void 0 ? void 0 : _updatedSongs_.image) || playlist.image\n                            };\n                        }\n                    }\n                    return playlist;\n                }));\n        } catch (error) {\n            console.error(\"Error adding song to playlist:\", error);\n        }\n    };\n    // Remove song from playlist\n    const removeSongFromPlaylist = async (playlistId, songId)=>{\n        if (!user) return;\n        try {\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"playlist_songs\").delete().eq(\"playlist_id\", parseInt(playlistId)).eq(\"song_id\", parseInt(songId));\n            if (error) throw error;\n            setPlaylists((prev)=>prev.map((playlist)=>{\n                    if (playlist.id === playlistId) {\n                        var _updatedSongs_;\n                        const updatedSongs = playlist.songs.filter((song)=>song.id !== songId);\n                        return {\n                            ...playlist,\n                            songs: updatedSongs,\n                            songCount: updatedSongs.length,\n                            image: ((_updatedSongs_ = updatedSongs[0]) === null || _updatedSongs_ === void 0 ? void 0 : _updatedSongs_.image) || \"https://images.pexels.com/photos/1763075/pexels-photo-1763075.jpeg?auto=compress&cs=tinysrgb&w=300\"\n                        };\n                    }\n                    return playlist;\n                }));\n        } catch (error) {\n            console.error(\"Error removing song from playlist:\", error);\n        }\n    };\n    // Update last song in user profile\n    const updateLastSong = async (songId)=>{\n        if (!user) return;\n        try {\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"users\").update({\n                last_song_file_id: parseInt(songId)\n            }).eq(\"id\", user.id);\n            if (error) throw error;\n        } catch (error) {\n            console.error(\"Error updating last song:\", error);\n        }\n    };\n    // Record listening history with proper time tracking\n    const recordListeningHistory = async (songId)=>{\n        if (!user) return;\n        // If there's a previous song playing, record its listening time\n        if (currentSongRef.current && currentSongStartTime) {\n            const endTime = new Date();\n            const minutesListened = (endTime.getTime() - currentSongStartTime.getTime()) / (1000 * 60);\n            if (minutesListened > 0.1) {\n                try {\n                    const minutes = Math.round(minutesListened * 100) / 100;\n                    const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.rpc(\"upsert_history_minutes\", {\n                        user_uuid: user.id,\n                        song_file_id: parseInt(currentSongRef.current),\n                        minutes: minutes\n                    });\n                    if (error) {\n                        console.error(\"❌ Error recording song history:\", error);\n                    } else {\n                        console.log(\"✅ History updated: +\".concat(minutes, \" mins for song \").concat(currentSongRef.current));\n                    }\n                } catch (error) {\n                    console.error(\"Error recording previous song history:\", error);\n                }\n            }\n        }\n        // Set new song as current\n        currentSongRef.current = songId;\n        setCurrentSongStartTime(new Date());\n        // Update last song in user profile\n        await updateLastSong(songId);\n        try {\n            await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.rpc(\"increment_song_views\", {\n                song_file_id: parseInt(songId)\n            });\n        } catch (error) {\n            console.error(\"Error incrementing song views:\", error);\n        }\n    };\n    // Stop current song tracking (when player is closed)\n    const stopCurrentSongTracking = async ()=>{\n        if (currentSongRef.current && currentSongStartTime && user) {\n            const endTime = new Date();\n            const minutesListened = (endTime.getTime() - currentSongStartTime.getTime()) / (1000 * 60);\n            if (minutesListened > 0.1) {\n                try {\n                    const minutes = Math.round(minutesListened * 100) / 100;\n                    const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.rpc(\"upsert_history_minutes\", {\n                        user_uuid: user.id,\n                        song_file_id: parseInt(currentSongRef.current),\n                        minutes: minutes\n                    });\n                    if (error) {\n                        console.error(\"❌ Error recording song history on stop:\", error);\n                    } else {\n                        console.log(\"\\uD83D\\uDED1 History updated on stop: +\".concat(minutes, \" mins for song \").concat(currentSongRef.current));\n                    }\n                } catch (error) {\n                    console.error(\"Error recording final song history:\", error);\n                }\n            }\n        }\n        currentSongRef.current = null;\n        setCurrentSongStartTime(null);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const loadData = async ()=>{\n            if (!user) {\n                // Reset data when user logs out\n                setSongs([]);\n                setPlaylists([]);\n                setLikedSongs(new Set());\n                setLastPlayedSong(null);\n                setLoading(false);\n                return;\n            }\n            try {\n                setLoading(true);\n                await Promise.all([\n                    fetchSongs(),\n                    fetchPlaylists()\n                ]);\n            } catch (error) {\n                console.error(\"Error loading data:\", error);\n            } finally{\n                setLoading(false);\n            }\n        };\n        loadData();\n    }, [\n        user\n    ]);\n    return {\n        songs,\n        playlists,\n        likedSongs: songs.filter((song)=>song.isLiked),\n        lastPlayedSong,\n        loading,\n        toggleLike,\n        createPlaylist,\n        deletePlaylist,\n        renamePlaylist,\n        addSongToPlaylist,\n        removeSongFromPlaylist,\n        recordListeningHistory,\n        stopCurrentSongTracking,\n        refreshData: ()=>{\n            fetchSongs();\n            fetchPlaylists();\n        },\n        getPersonalizedSongs\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2hvb2tzL3VzZVN1cGFiYXNlRGF0YS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW1EO0FBRXNCO0FBR2xFLFNBQVNJLGdCQUFnQkMsSUFBaUI7SUFDL0MsTUFBTSxDQUFDQyxPQUFPQyxTQUFTLEdBQUdQLCtDQUFRQSxDQUFTLEVBQUU7SUFDN0MsTUFBTSxDQUFDUSxXQUFXQyxhQUFhLEdBQUdULCtDQUFRQSxDQUFhLEVBQUU7SUFDekQsTUFBTSxDQUFDVSxZQUFZQyxjQUFjLEdBQUdYLCtDQUFRQSxDQUFjLElBQUlZO0lBQzlELE1BQU0sQ0FBQ0MsZ0JBQWdCQyxrQkFBa0IsR0FBR2QsK0NBQVFBLENBQWM7SUFDbEUsTUFBTSxDQUFDZSxTQUFTQyxXQUFXLEdBQUdoQiwrQ0FBUUEsQ0FBQztJQUN2QyxNQUFNLENBQUNpQixzQkFBc0JDLHdCQUF3QixHQUFHbEIsK0NBQVFBLENBQWM7SUFDOUUsTUFBTW1CLGlCQUFpQmpCLDZDQUFNQSxDQUFnQjtJQUU3QywwQ0FBMEM7SUFDMUMsTUFBTWtCLHNCQUFzQixTQUFDQztZQUFzQkMsMkVBQW1CO2VBQWlCO1lBQ3JGQyxTQUFTRixPQUFPRSxPQUFPO1lBQ3ZCQyxRQUFRSCxPQUFPRyxNQUFNO1lBQ3JCQyxNQUFNSixPQUFPSSxJQUFJO1lBQ2pCQyxRQUFRTCxPQUFPSyxNQUFNO1lBQ3JCQyxVQUFVTixPQUFPTSxRQUFRO1lBQ3pCQyxNQUFNUCxPQUFPTyxJQUFJO1lBQ2pCQyxPQUFPUixPQUFPUSxLQUFLO1lBQ25CQyxPQUFPVCxPQUFPUyxLQUFLO1lBQ25CQyxJQUFJVixPQUFPRSxPQUFPLENBQUNTLFFBQVE7WUFDM0JDLE9BQU8sb0NBQWtFWixPQUE5QkEsT0FBT0csTUFBTSxFQUFDLGtCQUE4QixPQUFkSCxPQUFPRyxNQUFNLEVBQUM7WUFDdkZGO1FBQ0Y7O0lBRUEsa0JBQWtCO0lBQ2xCLE1BQU1ZLGFBQWE7UUFDakIsSUFBSSxDQUFDN0IsTUFBTTtZQUNURSxTQUFTLEVB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QUFLLENBQUMsMkNBQTJDQTtvQkFDM0QsT0FBTzt3QkFDTHlCLFFBQVF1QixHQUFHLENBQUMsMENBQXlEbEUsT0FBekIrRyxTQUFRLG1CQUF3QyxPQUF2Qi9HLGVBQWUwRyxPQUFPO29CQUM3RjtnQkFDRixFQUFFLE9BQU94RixPQUFPO29CQUNkeUIsUUFBUXpCLEtBQUssQ0FBQyx1Q0FBdUNBO2dCQUN2RDtZQUNGO1FBRUk7UUFFQWxCLGVBQWUwRyxPQUFPLEdBQUc7UUFDekIzRyx3QkFBd0I7SUFDMUI7SUFFQWpCLGdEQUFTQSxDQUFDO1FBQ1IsTUFBTXFJLFdBQVc7WUFDZixJQUFJLENBQUNqSSxNQUFNO2dCQUNULGdDQUFnQztnQkFDaENFLFNBQVMsRUFBRTtnQkFDWEUsYUFBYSxFQUFFO2dCQUNmRSxjQUFjLElBQUlDO2dCQUNsQkUsa0JBQWtCO2dCQUNsQkUsV0FBVztnQkFDWDtZQUNGO1lBRUEsSUFBSTtnQkFDRkEsV0FBVztnQkFDWCxNQUFNdUgsUUFBUUMsR0FBRyxDQUFDO29CQUFDdEc7b0JBQWNvRDtpQkFBaUI7WUFDcEQsRUFBRSxPQUFPakQsT0FBTztnQkFDZHlCLFFBQVF6QixLQUFLLENBQUMsdUJBQXVCQTtZQUN2QyxTQUFVO2dCQUNSckIsV0FBVztZQUNiO1FBQ0Y7UUFFQXNIO0lBQ0YsR0FBRztRQUFDakk7S0FBSztJQUVULE9BQU87UUFDTEM7UUFDQUU7UUFDQUUsWUFBWUosTUFBTWtFLE1BQU0sQ0FBQ3ZCLENBQUFBLE9BQVFBLEtBQUszQixPQUFPO1FBQzdDVDtRQUNBRTtRQUNBK0U7UUFDQWU7UUFDQUU7UUFDQUU7UUFDQUc7UUFDQU07UUFDQUU7UUFDQVM7UUFDQUksYUFBYTtZQUNYdkc7WUFDQW9EO1FBQ0Y7UUFDQXZCO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ob29rcy91c2VTdXBhYmFzZURhdGEudHM/YWJmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFVzZXIgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnXG5pbXBvcnQgeyBzdXBhYmFzZSwgRGF0YWJhc2VTb25nLCBEYXRhYmFzZVBsYXlsaXN0IH0gZnJvbSAnQC9saWIvc3VwYWJhc2UnXG5pbXBvcnQgeyBTb25nLCBQbGF5bGlzdCB9IGZyb20gJ0AvdHlwZXMnXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTdXBhYmFzZURhdGEodXNlcjogVXNlciB8IG51bGwpIHtcbiAgY29uc3QgW3NvbmdzLCBzZXRTb25nc10gPSB1c2VTdGF0ZTxTb25nW10+KFtdKVxuICBjb25zdCBbcGxheWxpc3RzLCBzZXRQbGF5bGlzdHNdID0gdXNlU3RhdGU8UGxheWxpc3RbXT4oW10pXG4gIGNvbnN0IFtsaWtlZFNvbmdzLCBzZXRMaWtlZFNvbmdzXSA9IHVzZVN0YXRlPFNldDxudW1iZXI+PihuZXcgU2V0KCkpXG4gIGNvbnN0IFtsYXN0UGxheWVkU29uZywgc2V0TGFzdFBsYXllZFNvbmddID0gdXNlU3RhdGU8U29uZyB8IG51bGw+KG51bGwpXG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpXG4gIGNvbnN0IFtjdXJyZW50U29uZ1N0YXJ0VGltZSwgc2V0Q3VycmVudFNvbmdTdGFydFRpbWVdID0gdXNlU3RhdGU8RGF0ZSB8IG51bGw+KG51bGwpXG4gIGNvbnN0IGN1cnJlbnRTb25nUmVmID0gdXNlUmVmPHN0cmluZyB8IG51bGw+KG51bGwpXG5cbiAgLy8gQ29udmVydCBkYXRhYmFzZSBzb25nIHRvIFVJIHNvbmcgZm9ybWF0XG4gIGNvbnN0IGNvbnZlcnREYXRhYmFzZVNvbmcgPSAoZGJTb25nOiBEYXRhYmFzZVNvbmcsIGlzTGlrZWQ6IGJvb2xlYW4gPSBmYWxzZSk6IFNvbmcgPT4gKHtcbiAgICBmaWxlX2lkOiBkYlNvbmcuZmlsZV9pZCxcbiAgICBpbWdfaWQ6IGRiU29uZy5pbWdfaWQsXG4gICAgbmFtZTogZGJTb25nLm5hbWUsXG4gICAgYXJ0aXN0OiBkYlNvbmcuYXJ0aXN0LFxuICAgIGxhbmd1YWdlOiBkYlNvbmcubGFuZ3VhZ2UsXG4gICAgdGFnczogZGJTb25nLnRhZ3MsXG4gICAgdmlld3M6IGRiU29uZy52aWV3cyxcbiAgICBsaWtlczogZGJTb25nLmxpa2VzLFxuICAgIGlkOiBkYlNvbmcuZmlsZV9pZC50b1N0cmluZygpLFxuICAgIGltYWdlOiBgaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvJHtkYlNvbmcuaW1nX2lkfS9wZXhlbHMtcGhvdG8tJHtkYlNvbmcuaW1nX2lkfS5qcGVnP2F1dG89Y29tcHJlc3MmY3M9dGlueXNyZ2Imdz0zMDBgLFxuICAgIGlzTGlrZWRcbiAgfSlcblxuICAvLyBGZXRjaCBhbGwgc29uZ3NcbiAgY29uc3QgZmV0Y2hTb25ncyA9IGFzeW5jICgpID0+IHtcbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIHNldFNvbmdzKFtdKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIFxuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGE6IHNvbmdzRGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdzb25ncycpXG4gICAgICAgIC5zZWxlY3QoJyonKVxuICAgICAgICAub3JkZXIoJ3ZpZXdzJywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pXG5cbiAgICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3JcblxuICAgICAgbGV0IHVzZXJMaWtlZFNvbmdzID0gbmV3IFNldDxudW1iZXI+KClcbiAgICAgIFxuICAgICAgY29uc3QgeyBkYXRhOiBsaWtlZERhdGEgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdsaWtlZF9zb25ncycpXG4gICAgICAgIC5zZWxlY3QoJ3NvbmdfaWQnKVxuICAgICAgICAuZXEoJ3VzZXJfaWQnLCB1c2VyLmlkKVxuICAgICAgXG4gICAgICBpZiAobGlrZWREYXRhKSB7XG4gICAgICAgIHVzZXJMaWtlZFNvbmdzID0gbmV3IFNldChsaWtlZERhdGEubWFwKGl0ZW0gPT4gaXRlbS5zb25nX2lkKSlcbiAgICAgICAgc2V0TGlrZWRTb25ncyh1c2VyTGlrZWRTb25ncylcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29udmVydGVkU29uZ3MgPSBzb25nc0RhdGE/Lm1hcChzb25nID0+IFxuICAgICAgICBjb252ZXJ0RGF0YWJhc2VTb25nKHNvbmcsIHVzZXJMaWtlZFNvbmdzLmhhcyhzb25nLmZpbGVfaWQpKVxuICAgICAgKSB8fCBbXVxuXG4gICAgICBjb25zdCBzb3J0ZWRTb25ncyA9IFsuLi5jb252ZXJ0ZWRTb25nc10uc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBjb25zdCBhU2NvcmUgPSBhLnZpZXdzICsgYS5saWtlcztcbiAgICAgICAgY29uc3QgYlNjb3JlID0gYi52aWV3cyArIGIubGlrZXM7XG4gICAgICAgIHJldHVybiBiU2NvcmUgLSBhU2NvcmU7XG4gICAgICB9KTtcblxuICAgICAgc2V0U29uZ3Moc29ydGVkU29uZ3MpO1xuXG4gICAgICBjb25zdCB7IGRhdGE6IHVzZXJEYXRhIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgndXNlcnMnKVxuICAgICAgICAuc2VsZWN0KCdsYXN0X3NvbmdfZmlsZV9pZCcpXG4gICAgICAgIC5lcSgnaWQnLCB1c2VyLmlkKVxuICAgICAgICAuc2luZ2xlKClcblxuICAgICAgaWYgKHVzZXJEYXRhPy5sYXN0X3NvbmdfZmlsZV9pZCkge1xuICAgICAgICBjb25zdCBsYXN0U29uZyA9IGNvbnZlcnRlZFNvbmdzLmZpbmQoc29uZyA9PiBzb25nLmZpbGVfaWQgPT09IHVzZXJEYXRhLmxhc3Rfc29uZ19maWxlX2lkKVxuICAgICAgICBpZiAobGFzdFNvbmcpIHtcbiAgICAgICAgICBzZXRMYXN0UGxheWVkU29uZyhsYXN0U29uZylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBzb25nczonLCBlcnJvcilcbiAgICAgIHNldFNvbmdzKFtdKSAvLyBTZXQgZW1wdHkgYXJyYXkgb24gZXJyb3JcbiAgICB9XG4gIH1cblxuXG5hc3luYyBmdW5jdGlvbiBnZXRQZXJzb25hbGl6ZWRTb25ncyh1c2VySWQ6IHN0cmluZywgY3VycmVudFNvbmc6IFNvbmcpIHtcbiAgLy8gMS4gRmV0Y2ggYWxsIHNvbmdzXG4gIGNvbnN0IHsgZGF0YTogc29uZ3MgfSA9IGF3YWl0IHN1cGFiYXNlLmZyb20oJ3NvbmdzJykuc2VsZWN0KCcqJyk7XG4gIGlmICghc29uZ3MpIHJldHVybiBbXTtcblxuICAvLyAyLiBGZXRjaCBsaXN0ZW5pbmcgaGlzdG9yeVxuICBjb25zdCB7IGRhdGE6IGhpc3RvcnkgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgLmZyb20oJ2hpc3RvcnknKVxuICAgIC5zZWxlY3QoJyonKVxuICAgIC5lcSgndXNlcl9pZCcsIHVzZXJJZCk7XG4gIGNvbnN0IGhpc3RvcnlNYXAgPSBuZXcgTWFwKGhpc3Rvcnk/Lm1hcCgoaCkgPT4gW2guc29uZ19pZCwgaC5taW51dGVzX2xpc3RlbmVkXSkpO1xuXG4gIGNvbnN0IHJlY29tbWVuZGF0aW9ucyA9IHNvbmdzXG4gICAgLmZpbHRlcigoc29uZykgPT4gc29uZy5maWxlX2lkICE9PSBjdXJyZW50U29uZy5maWxlX2lkKSAvLyBleGNsdWRlIGN1cnJlbnQgc29uZ1xuICAgIC5tYXAoKHNvbmcpID0+IHtcbiAgICAgIGxldCBzY29yZSA9IDA7XG5cbiAgICAgIC8vIPCfjq8gVGFnIE1hdGNoXG4gICAgICBjb25zdCBtYXRjaGluZ1RhZ3MgPSBzb25nLnRhZ3MuZmlsdGVyKCh0YWc6IHN0cmluZykgPT5cbiAgICAgICAgY3VycmVudFNvbmcudGFncy5pbmNsdWRlcyh0YWcpXG4gICAgICApO1xuICAgICAgc2NvcmUgKz0gbWF0Y2hpbmdUYWdzLmxlbmd0aCAqIDEwO1xuXG4gICAgICAvLyDwn5GkIEFydGlzdCBNYXRjaFxuICAgICAgaWYgKHNvbmcuYXJ0aXN0ID09PSBjdXJyZW50U29uZy5hcnRpc3QpIHtcbiAgICAgICAgc2NvcmUgKz0gMjA7XG4gICAgICB9XG5cbiAgICAgIC8vIOKPsSBMaXN0ZW5pbmcgSGlzdG9yeSBCb29zdFxuICAgICAgY29uc3QgbGlzdGVuZWRNaW51dGVzID0gaGlzdG9yeU1hcC5nZXQoc29uZy5maWxlX2lkKSB8fCAwO1xuICAgICAgc2NvcmUgKz0gbGlzdGVuZWRNaW51dGVzO1xuXG4gICAgICAvLyDinaTvuI8gTGlrZXMgQm9vc3RcbiAgICAgIHNjb3JlICs9IChzb25nLmxpa2VzIHx8IDApIC8gMTAwO1xuXG4gICAgICAvLyDwn5GBIFZpZXdzIEJvb3N0XG4gICAgICBzY29yZSArPSAoc29uZy52aWV3cyB8fCAwKSAvIDEwMDA7XG5cbiAgICAgIC8vIEFkZCBzb21lIHJhbmRvbW5lc3MgdG8gYXZvaWQgYWx3YXlzIGdldHRpbmcgdGhlIHNhbWUgcmVjb21tZW5kYXRpb25zXG4gICAgICBzY29yZSArPSBNYXRoLnJhbmRvbSgpICogNTtcbiAgICAgIHJldHVybiB7IHNvbmcsIHNjb3JlIH07XG4gICAgfSk7XG5cbiAgLy8gMy4gU29ydCBhbmQgcmV0dXJuIHRvcCAxMCBmb3IgYmV0dGVyIHZhcmlldHlcbiAgY29uc3QgdG9wNSA9IHJlY29tbWVuZGF0aW9uc1xuICAgIC5zb3J0KChhLCBiKSA9PiBiLnNjb3JlIC0gYS5zY29yZSlcbiAgICAuc2xpY2UoMCwgMTApXG4gICAgLm1hcCgoZW50cnkpID0+IGVudHJ5LnNvbmcpO1xuXG4gIGNvbnNvbGUubG9nKCfwn461IFBlcnNvbmFsaXplZCBUb3AgMTAgU29uZ3M6JywgdG9wNSk7XG4gIHJldHVybiB0b3A1O1xufVxuXG4gIC8vIEZldGNoIHVzZXIgcGxheWxpc3RzXG4gIGNvbnN0IGZldGNoUGxheWxpc3RzID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmICghdXNlcikge1xuICAgICAgc2V0UGxheWxpc3RzKFtdKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YTogcGxheWxpc3RzRGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdwbGF5bGlzdHMnKVxuICAgICAgICAuc2VsZWN0KGBcbiAgICAgICAgICBpZCxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIHBsYXlsaXN0X3NvbmdzIChcbiAgICAgICAgICAgIHNvbmdzICgqKVxuICAgICAgICAgIClcbiAgICAgICAgYClcbiAgICAgICAgLmVxKCd1c2VyX2lkJywgdXNlci5pZClcblxuICAgICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvclxuXG4gICAgICBjb25zdCBjb252ZXJ0ZWRQbGF5bGlzdHM6IFBsYXlsaXN0W10gPSBwbGF5bGlzdHNEYXRhPy5tYXAocGxheWxpc3QgPT4ge1xuICAgICAgICBjb25zdCBwbGF5bGlzdFNvbmdzID0gcGxheWxpc3QucGxheWxpc3Rfc29uZ3M/Lm1hcCgocHM6IGFueSkgPT4gXG4gICAgICAgICAgY29udmVydERhdGFiYXNlU29uZyhwcy5zb25ncywgbGlrZWRTb25ncy5oYXMocHMuc29uZ3MuZmlsZV9pZCkpXG4gICAgICAgICkgfHwgW11cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlkOiBwbGF5bGlzdC5pZC50b1N0cmluZygpLFxuICAgICAgICAgIG5hbWU6IHBsYXlsaXN0Lm5hbWUsXG4gICAgICAgICAgc29uZ0NvdW50OiBwbGF5bGlzdFNvbmdzLmxlbmd0aCxcbiAgICAgICAgICBpbWFnZTogcGxheWxpc3RTb25nc1swXT8uaW1hZ2UgfHwgJ2h0dHBzOi8vaW1hZ2VzLnBleGVscy5jb20vcGhvdG9zLzE3NjMwNzUvcGV4ZWxzLXBob3RvLTE3NjMwNzUuanBlZz9hdXRvPWNvbXByZXNzJmNzPXRpbnlzcmdiJnc9MzAwJyxcbiAgICAgICAgICBzb25nczogcGxheWxpc3RTb25nc1xuICAgICAgICB9XG4gICAgICB9KSB8fCBbXVxuXG4gICAgICBzZXRQbGF5bGlzdHMoY29udmVydGVkUGxheWxpc3RzKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBwbGF5bGlzdHM6JywgZXJyb3IpXG4gICAgfVxuICB9XG5cbiAgLy8gVG9nZ2xlIGxpa2Ugc29uZ1xuICBjb25zdCB0b2dnbGVMaWtlID0gYXN5bmMgKHNvbmdJZDogc3RyaW5nKSA9PiB7XG4gIGlmICghdXNlcikgcmV0dXJuO1xuXG4gIGNvbnN0IHNvbmdGaWxlSWQgPSBwYXJzZUludChzb25nSWQpO1xuICBjb25zdCBpc0N1cnJlbnRseUxpa2VkID0gbGlrZWRTb25ncy5oYXMoc29uZ0ZpbGVJZCk7XG5cbiAgdHJ5IHtcbiAgICBpZiAoaXNDdXJyZW50bHlMaWtlZCkge1xuICAgICAgLy8gUmVtb3ZlIGZyb20gbGlrZWRfc29uZ3NcbiAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdsaWtlZF9zb25ncycpXG4gICAgICAgIC5kZWxldGUoKVxuICAgICAgICAuZXEoJ3VzZXJfaWQnLCB1c2VyLmlkKVxuICAgICAgICAuZXEoJ3NvbmdfaWQnLCBzb25nRmlsZUlkKTtcblxuICAgICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcblxuICAgICAgLy8gRGVjcmVtZW50IGxpa2VzXG4gICAgICBhd2FpdCBzdXBhYmFzZS5ycGMoJ2RlY3JlbWVudF9zb25nX2xpa2VzJywgeyBzb25nX2ZpbGVfaWQ6IHNvbmdGaWxlSWQgfSk7XG5cbiAgICAgIHNldExpa2VkU29uZ3MocHJldiA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1NldCA9IG5ldyBTZXQocHJldik7XG4gICAgICAgIG5ld1NldC5kZWxldGUoc29uZ0ZpbGVJZCk7XG4gICAgICAgIHJldHVybiBuZXdTZXQ7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQWRkIHRvIGxpa2VkX3NvbmdzXG4gICAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgnbGlrZWRfc29uZ3MnKVxuICAgICAgICAuaW5zZXJ0KHtcbiAgICAgICAgICB1c2VyX2lkOiB1c2VyLmlkLFxuICAgICAgICAgIHNvbmdfaWQ6IHNvbmdGaWxlSWQsXG4gICAgICAgIH0pO1xuXG4gICAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xuXG4gICAgICAvLyBJbmNyZW1lbnQgbGlrZXNcbiAgICAgIGF3YWl0IHN1cGFiYXNlLnJwYygnaW5jcmVtZW50X3NvbmdfbGlrZXMnLCB7IHNvbmdfZmlsZV9pZDogc29uZ0ZpbGVJZCB9KTtcblxuICAgICAgc2V0TGlrZWRTb25ncyhwcmV2ID0+IG5ldyBTZXQocHJldikuYWRkKHNvbmdGaWxlSWQpKTtcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgc29uZ3Mgc3RhdGVcbiAgICAvLyBVcGRhdGUgc29uZ3Mgc3RhdGVcbnNldFNvbmdzKHByZXZTb25ncyA9PlxuICBwcmV2U29uZ3MubWFwKHNvbmcgPT5cbiAgICBzb25nLmlkID09PSBzb25nSWRcbiAgICAgID8ge1xuICAgICAgICAgIC4uLnNvbmcsXG4gICAgICAgICAgaXNMaWtlZDogIWlzQ3VycmVudGx5TGlrZWQsXG4gICAgICAgICAgbGlrZXM6IHNvbmcubGlrZXMgKyAoaXNDdXJyZW50bHlMaWtlZCA/IC0xIDogMSksXG4gICAgICAgIH1cbiAgICAgIDogc29uZ1xuICApXG4pO1xuXG5cbiAgICAvLyBVcGRhdGUgcGxheWxpc3RzIHN0YXRlXG4gICAgc2V0UGxheWxpc3RzKHByZXZQbGF5bGlzdHMgPT5cbiAgICAgIHByZXZQbGF5bGlzdHMubWFwKHBsYXlsaXN0ID0+ICh7XG4gICAgICAgIC4uLnBsYXlsaXN0LFxuICAgICAgICBzb25nczogcGxheWxpc3Quc29uZ3MubWFwKHNvbmcgPT5cbiAgICAgICAgICBzb25nLmlkID09PSBzb25nSWRcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIC4uLnNvbmcsXG4gICAgICAgICAgICAgICAgaXNMaWtlZDogIWlzQ3VycmVudGx5TGlrZWQsXG4gICAgICAgICAgICAgICAgbGlrZXM6IHNvbmcubGlrZXMgKyAoaXNDdXJyZW50bHlMaWtlZCA/IC0xIDogMSksXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogc29uZ1xuICAgICAgICApLFxuICAgICAgfSkpXG4gICAgKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciB0b2dnbGluZyBsaWtlOicsIGVycm9yKTtcbiAgfVxufTtcblxuXG4gIC8vIENyZWF0ZSBwbGF5bGlzdFxuICBjb25zdCBjcmVhdGVQbGF5bGlzdCA9IGFzeW5jIChuYW1lOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoIXVzZXIpIHJldHVyblxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdwbGF5bGlzdHMnKVxuICAgICAgICAuaW5zZXJ0KHtcbiAgICAgICAgICB1c2VyX2lkOiB1c2VyLmlkLFxuICAgICAgICAgIG5hbWVcbiAgICAgICAgfSlcbiAgICAgICAgLnNlbGVjdCgpXG4gICAgICAgIC5zaW5nbGUoKVxuXG4gICAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yXG5cbiAgICAgIGNvbnN0IG5ld1BsYXlsaXN0OiBQbGF5bGlzdCA9IHtcbiAgICAgICAgaWQ6IGRhdGEuaWQudG9TdHJpbmcoKSxcbiAgICAgICAgbmFtZTogZGF0YS5uYW1lLFxuICAgICAgICBzb25nQ291bnQ6IDAsXG4gICAgICAgIGltYWdlOiAnaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvMTc2MzA3NS9wZXhlbHMtcGhvdG8tMTc2MzA3NS5qcGVnP2F1dG89Y29tcHJlc3MmY3M9dGlueXNyZ2Imdz0zMDAnLFxuICAgICAgICBzb25nczogW11cbiAgICAgIH1cblxuICAgICAgc2V0UGxheWxpc3RzKHByZXYgPT4gWy4uLnByZXYsIG5ld1BsYXlsaXN0XSlcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY3JlYXRpbmcgcGxheWxpc3Q6JywgZXJyb3IpXG4gICAgfVxuICB9XG5cbiAgLy8gRGVsZXRlIHBsYXlsaXN0XG4gIGNvbnN0IGRlbGV0ZVBsYXlsaXN0ID0gYXN5bmMgKHBsYXlsaXN0SWQ6IHN0cmluZykgPT4ge1xuICAgIGlmICghdXNlcikgcmV0dXJuXG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3BsYXlsaXN0cycpXG4gICAgICAgIC5kZWxldGUoKVxuICAgICAgICAuZXEoJ2lkJywgcGFyc2VJbnQocGxheWxpc3RJZCkpXG4gICAgICAgIC5lcSgndXNlcl9pZCcsIHVzZXIuaWQpXG5cbiAgICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3JcblxuICAgICAgc2V0UGxheWxpc3RzKHByZXYgPT4gcHJldi5maWx0ZXIocGxheWxpc3QgPT4gcGxheWxpc3QuaWQgIT09IHBsYXlsaXN0SWQpKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBkZWxldGluZyBwbGF5bGlzdDonLCBlcnJvcilcbiAgICB9XG4gIH1cblxuICAvLyBSZW5hbWUgcGxheWxpc3RcbiAgY29uc3QgcmVuYW1lUGxheWxpc3QgPSBhc3luYyAocGxheWxpc3RJZDogc3RyaW5nLCBuZXdOYW1lOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoIXVzZXIpIHJldHVyblxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdwbGF5bGlzdHMnKVxuICAgICAgICAudXBkYXRlKHsgbmFtZTogbmV3TmFtZSB9KVxuICAgICAgICAuZXEoJ2lkJywgcGFyc2VJbnQocGxheWxpc3RJZCkpXG4gICAgICAgIC5lcSgndXNlcl9pZCcsIHVzZXIuaWQpXG5cbiAgICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3JcblxuICAgICAgc2V0UGxheWxpc3RzKHByZXYgPT4gXG4gICAgICAgIHByZXYubWFwKHBsYXlsaXN0ID0+IFxuICAgICAgICAgIHBsYXlsaXN0LmlkID09PSBwbGF5bGlzdElkIFxuICAgICAgICAgICAgPyB7IC4uLnBsYXlsaXN0LCBuYW1lOiBuZXdOYW1lIH1cbiAgICAgICAgICAgIDogcGxheWxpc3RcbiAgICAgICAgKVxuICAgICAgKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciByZW5hbWluZyBwbGF5bGlzdDonLCBlcnJvcilcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgc29uZyB0byBwbGF5bGlzdFxuICBjb25zdCBhZGRTb25nVG9QbGF5bGlzdCA9IGFzeW5jIChwbGF5bGlzdElkOiBzdHJpbmcsIHNvbmc6IFNvbmcpID0+IHtcbiAgICBpZiAoIXVzZXIpIHJldHVyblxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdwbGF5bGlzdF9zb25ncycpXG4gICAgICAgIC5pbnNlcnQoe1xuICAgICAgICAgIHBsYXlsaXN0X2lkOiBwYXJzZUludChwbGF5bGlzdElkKSxcbiAgICAgICAgICBzb25nX2lkOiBzb25nLmZpbGVfaWRcbiAgICAgICAgfSlcblxuICAgICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvclxuXG4gICAgICBzZXRQbGF5bGlzdHMocHJldiA9PiBcbiAgICAgICAgcHJldi5tYXAocGxheWxpc3QgPT4ge1xuICAgICAgICAgIGlmIChwbGF5bGlzdC5pZCA9PT0gcGxheWxpc3RJZCkge1xuICAgICAgICAgICAgY29uc3Qgc29uZ0V4aXN0cyA9IHBsYXlsaXN0LnNvbmdzLnNvbWUocyA9PiBzLmlkID09PSBzb25nLmlkKVxuICAgICAgICAgICAgaWYgKCFzb25nRXhpc3RzKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRTb25ncyA9IFsuLi5wbGF5bGlzdC5zb25ncywgc29uZ11cbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5wbGF5bGlzdCxcbiAgICAgICAgICAgICAgICBzb25nczogdXBkYXRlZFNvbmdzLFxuICAgICAgICAgICAgICAgIHNvbmdDb3VudDogdXBkYXRlZFNvbmdzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBpbWFnZTogdXBkYXRlZFNvbmdzWzBdPy5pbWFnZSB8fCBwbGF5bGlzdC5pbWFnZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBwbGF5bGlzdFxuICAgICAgICB9KVxuICAgICAgKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBhZGRpbmcgc29uZyB0byBwbGF5bGlzdDonLCBlcnJvcilcbiAgICB9XG4gIH1cblxuICAvLyBSZW1vdmUgc29uZyBmcm9tIHBsYXlsaXN0XG4gIGNvbnN0IHJlbW92ZVNvbmdGcm9tUGxheWxpc3QgPSBhc3luYyAocGxheWxpc3RJZDogc3RyaW5nLCBzb25nSWQ6IHN0cmluZykgPT4ge1xuICAgIGlmICghdXNlcikgcmV0dXJuXG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3BsYXlsaXN0X3NvbmdzJylcbiAgICAgICAgLmRlbGV0ZSgpXG4gICAgICAgIC5lcSgncGxheWxpc3RfaWQnLCBwYXJzZUludChwbGF5bGlzdElkKSlcbiAgICAgICAgLmVxKCdzb25nX2lkJywgcGFyc2VJbnQoc29uZ0lkKSlcblxuICAgICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvclxuXG4gICAgICBzZXRQbGF5bGlzdHMocHJldiA9PiBcbiAgICAgICAgcHJldi5tYXAocGxheWxpc3QgPT4ge1xuICAgICAgICAgIGlmIChwbGF5bGlzdC5pZCA9PT0gcGxheWxpc3RJZCkge1xuICAgICAgICAgICAgY29uc3QgdXBkYXRlZFNvbmdzID0gcGxheWxpc3Quc29uZ3MuZmlsdGVyKHNvbmcgPT4gc29uZy5pZCAhPT0gc29uZ0lkKVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgLi4ucGxheWxpc3QsXG4gICAgICAgICAgICAgIHNvbmdzOiB1cGRhdGVkU29uZ3MsXG4gICAgICAgICAgICAgIHNvbmdDb3VudDogdXBkYXRlZFNvbmdzLmxlbmd0aCxcbiAgICAgICAgICAgICAgaW1hZ2U6IHVwZGF0ZWRTb25nc1swXT8uaW1hZ2UgfHwgJ2h0dHBzOi8vaW1hZ2VzLnBleGVscy5jb20vcGhvdG9zLzE3NjMwNzUvcGV4ZWxzLXBob3RvLTE3NjMwNzUuanBlZz9hdXRvPWNvbXByZXNzJmNzPXRpbnlzcmdiJnc9MzAwJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcGxheWxpc3RcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVtb3Zpbmcgc29uZyBmcm9tIHBsYXlsaXN0OicsIGVycm9yKVxuICAgIH1cbiAgfVxuXG4gIC8vIFVwZGF0ZSBsYXN0IHNvbmcgaW4gdXNlciBwcm9maWxlXG4gIGNvbnN0IHVwZGF0ZUxhc3RTb25nID0gYXN5bmMgKHNvbmdJZDogc3RyaW5nKSA9PiB7XG4gICAgaWYgKCF1c2VyKSByZXR1cm5cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgndXNlcnMnKVxuICAgICAgICAudXBkYXRlKHsgbGFzdF9zb25nX2ZpbGVfaWQ6IHBhcnNlSW50KHNvbmdJZCkgfSlcbiAgICAgICAgLmVxKCdpZCcsIHVzZXIuaWQpXG5cbiAgICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3JcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBkYXRpbmcgbGFzdCBzb25nOicsIGVycm9yKVxuICAgIH1cbiAgfVxuXG4gIC8vIFJlY29yZCBsaXN0ZW5pbmcgaGlzdG9yeSB3aXRoIHByb3BlciB0aW1lIHRyYWNraW5nXG4gIGNvbnN0IHJlY29yZExpc3RlbmluZ0hpc3RvcnkgPSBhc3luYyAoc29uZ0lkOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoIXVzZXIpIHJldHVyblxuXG4gICAgLy8gSWYgdGhlcmUncyBhIHByZXZpb3VzIHNvbmcgcGxheWluZywgcmVjb3JkIGl0cyBsaXN0ZW5pbmcgdGltZVxuICAgICAgaWYgKGN1cnJlbnRTb25nUmVmLmN1cnJlbnQgJiYgY3VycmVudFNvbmdTdGFydFRpbWUpIHtcbiAgICBjb25zdCBlbmRUaW1lID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCBtaW51dGVzTGlzdGVuZWQgPSAoZW5kVGltZS5nZXRUaW1lKCkgLSBjdXJyZW50U29uZ1N0YXJ0VGltZS5nZXRUaW1lKCkpIC8gKDEwMDAgKiA2MCk7XG5cbiAgICBpZiAobWludXRlc0xpc3RlbmVkID4gMC4xKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBtaW51dGVzID0gTWF0aC5yb3VuZChtaW51dGVzTGlzdGVuZWQgKiAxMDApIC8gMTAwO1xuICAgICAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5ycGMoJ3Vwc2VydF9oaXN0b3J5X21pbnV0ZXMnLCB7XG4gICAgICAgICAgdXNlcl91dWlkOiB1c2VyLmlkLFxuICAgICAgICAgIHNvbmdfZmlsZV9pZDogcGFyc2VJbnQoY3VycmVudFNvbmdSZWYuY3VycmVudCksXG4gICAgICAgICAgbWludXRlczogbWludXRlcyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIHJlY29yZGluZyBzb25nIGhpc3Rvcnk6JywgZXJyb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGDinIUgSGlzdG9yeSB1cGRhdGVkOiArJHttaW51dGVzfSBtaW5zIGZvciBzb25nICR7Y3VycmVudFNvbmdSZWYuY3VycmVudH1gKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVjb3JkaW5nIHByZXZpb3VzIHNvbmcgaGlzdG9yeTonLCBlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cblxuICAgIC8vIFNldCBuZXcgc29uZyBhcyBjdXJyZW50XG4gICAgY3VycmVudFNvbmdSZWYuY3VycmVudCA9IHNvbmdJZFxuICAgIHNldEN1cnJlbnRTb25nU3RhcnRUaW1lKG5ldyBEYXRlKCkpXG4gICAgXG4gICAgLy8gVXBkYXRlIGxhc3Qgc29uZyBpbiB1c2VyIHByb2ZpbGVcbiAgICBhd2FpdCB1cGRhdGVMYXN0U29uZyhzb25nSWQpXG50cnkge1xuICBhd2FpdCBzdXBhYmFzZS5ycGMoJ2luY3JlbWVudF9zb25nX3ZpZXdzJywgeyBzb25nX2ZpbGVfaWQ6IHBhcnNlSW50KHNvbmdJZCkgfSk7XG59IGNhdGNoIChlcnJvcikge1xuICBjb25zb2xlLmVycm9yKCdFcnJvciBpbmNyZW1lbnRpbmcgc29uZyB2aWV3czonLCBlcnJvcik7XG59XG5cbiAgfVxuXG4gIC8vIFN0b3AgY3VycmVudCBzb25nIHRyYWNraW5nICh3aGVuIHBsYXllciBpcyBjbG9zZWQpXG4gIGNvbnN0IHN0b3BDdXJyZW50U29uZ1RyYWNraW5nID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmIChjdXJyZW50U29uZ1JlZi5jdXJyZW50ICYmIGN1cnJlbnRTb25nU3RhcnRUaW1lICYmIHVzZXIpIHtcbiAgICAgIGNvbnN0IGVuZFRpbWUgPSBuZXcgRGF0ZSgpXG4gICAgICBjb25zdCBtaW51dGVzTGlzdGVuZWQgPSAoZW5kVGltZS5nZXRUaW1lKCkgLSBjdXJyZW50U29uZ1N0YXJ0VGltZS5nZXRUaW1lKCkpIC8gKDEwMDAgKiA2MClcbiAgICAgIFxuICAgICAgaWYgKG1pbnV0ZXNMaXN0ZW5lZCA+IDAuMSkge1xuICB0cnkge1xuICAgIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLnJvdW5kKG1pbnV0ZXNMaXN0ZW5lZCAqIDEwMCkgLyAxMDA7XG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UucnBjKCd1cHNlcnRfaGlzdG9yeV9taW51dGVzJywge1xuICAgICAgdXNlcl91dWlkOiB1c2VyLmlkLFxuICAgICAgc29uZ19maWxlX2lkOiBwYXJzZUludChjdXJyZW50U29uZ1JlZi5jdXJyZW50KSxcbiAgICAgIG1pbnV0ZXM6IG1pbnV0ZXMsXG4gICAgfSk7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciByZWNvcmRpbmcgc29uZyBoaXN0b3J5IG9uIHN0b3A6JywgZXJyb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyhg8J+bkSBIaXN0b3J5IHVwZGF0ZWQgb24gc3RvcDogKyR7bWludXRlc30gbWlucyBmb3Igc29uZyAke2N1cnJlbnRTb25nUmVmLmN1cnJlbnR9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJlY29yZGluZyBmaW5hbCBzb25nIGhpc3Rvcnk6JywgZXJyb3IpO1xuICB9XG59XG5cbiAgICB9XG5cbiAgICBjdXJyZW50U29uZ1JlZi5jdXJyZW50ID0gbnVsbFxuICAgIHNldEN1cnJlbnRTb25nU3RhcnRUaW1lKG51bGwpXG4gIH1cblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGxvYWREYXRhID0gYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgIC8vIFJlc2V0IGRhdGEgd2hlbiB1c2VyIGxvZ3Mgb3V0XG4gICAgICAgIHNldFNvbmdzKFtdKVxuICAgICAgICBzZXRQbGF5bGlzdHMoW10pXG4gICAgICAgIHNldExpa2VkU29uZ3MobmV3IFNldCgpKVxuICAgICAgICBzZXRMYXN0UGxheWVkU29uZyhudWxsKVxuICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0TG9hZGluZyh0cnVlKVxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbZmV0Y2hTb25ncygpLCBmZXRjaFBsYXlsaXN0cygpXSlcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgZGF0YTonLCBlcnJvcilcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHNldExvYWRpbmcoZmFsc2UpXG4gICAgICB9XG4gICAgfVxuXG4gICAgbG9hZERhdGEoKVxuICB9LCBbdXNlcl0pXG5cbiAgcmV0dXJuIHtcbiAgICBzb25ncyxcbiAgICBwbGF5bGlzdHMsXG4gICAgbGlrZWRTb25nczogc29uZ3MuZmlsdGVyKHNvbmcgPT4gc29uZy5pc0xpa2VkKSxcbiAgICBsYXN0UGxheWVkU29uZyxcbiAgICBsb2FkaW5nLFxuICAgIHRvZ2dsZUxpa2UsXG4gICAgY3JlYXRlUGxheWxpc3QsXG4gICAgZGVsZXRlUGxheWxpc3QsXG4gICAgcmVuYW1lUGxheWxpc3QsXG4gICAgYWRkU29uZ1RvUGxheWxpc3QsXG4gICAgcmVtb3ZlU29uZ0Zyb21QbGF5bGlzdCxcbiAgICByZWNvcmRMaXN0ZW5pbmdIaXN0b3J5LFxuICAgIHN0b3BDdXJyZW50U29uZ1RyYWNraW5nLFxuICAgIHJlZnJlc2hEYXRhOiAoKSA9PiB7XG4gICAgICBmZXRjaFNvbmdzKClcbiAgICAgIGZldGNoUGxheWxpc3RzKClcbiAgICB9LFxuICAgIGdldFBlcnNvbmFsaXplZFNvbmdzXG4gIH1cbn0iXSwibmFtZXMiOlsidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJzdXBhYmFzZSIsInVzZVN1cGFiYXNlRGF0YSIsInVzZXIiLCJzb25ncyIsInNldFNvbmdzIiwicGxheWxpc3RzIiwic2V0UGxheWxpc3RzIiwibGlrZWRTb25ncyIsInNldExpa2VkU29uZ3MiLCJTZXQiLCJsYXN0UGxheWVkU29uZyIsInNldExhc3RQbGF5ZWRTb25nIiwibG9hZGluZyIsInNldExvYWRpbmciLCJjdXJyZW50U29uZ1N0YXJ0VGltZSIsInNldEN1cnJlbnRTb25nU3RhcnRUaW1lIiwiY3VycmVudFNvbmdSZWYiLCJjb252ZXJ0RGF0YWJhc2VTb25nIiwiZGJTb25nIiwiaXNMaWtlZCIsImZpbGVfaWQiLCJpbWdfaWQiLCJuYW1lIiwiYXJ0aXN0IiwibGFuZ3VhZ2UiLCJ0YWdzIiwidmlld3MiLCJsaWtlcyIsImlkIiwidG9TdHJpbmciLCJpbWFnZSIsImZldGNoU29uZ3MiLCJkYXRhIiwic29uZ3NEYXRhIiwiZXJyb3IiLCJmcm9tIiwic2VsZWN0Iiwib3JkZXIiLCJhc2NlbmRpbmciLCJ1c2VyTGlrZWRTb25ncyIsImxpa2VkRGF0YSIsImVxIiwibWFwIiwiaXRlbSIsInNvbmdfaWQiLCJjb252ZXJ0ZWRTb25ncyIsInNvbmciLCJoYXMiLCJzb3J0ZWRTb25ncyIsInNvcnQiLCJhIiwiYiIsImFTY29yZSIsImJTY29yZSIsInVzZXJEYXRhIiwic2luZ2xlIiwibGFzdF9zb25nX2ZpbGVfaWQiLCJsYXN0U29uZyIsImZpbmQiLCJjb25zb2xlIiwiZ2V0UGVyc29uYWxpemVkU29uZ3MiLCJ1c2VySWQiLCJjdXJyZW50U29uZyIsImhpc3RvcnkiLCJoaXN0b3J5TWFwIiwiTWFwIiwiaCIsIm1pbnV0ZXNfbGlzdGVuZWQiLCJyZWNvbW1lbmRhdGlvbnMiLCJmaWx0ZXIiLCJzY29yZSIsIm1hdGNoaW5nVGFncyIsInRhZyIsImluY2x1ZGVzIiwibGVuZ3RoIiwibGlzdGVuZWRNaW51dGVzIiwiZ2V0IiwiTWF0aCIsInJhbmRvbSIsInRvcDUiLCJzbGljZSIsImVudHJ5IiwibG9nIiwiZmV0Y2hQbGF5bGlzdHMiLCJwbGF5bGlzdHNEYXRhIiwiY29udmVydGVkUGxheWxpc3RzIiwicGxheWxpc3QiLCJwbGF5bGlzdFNvbmdzIiwicGxheWxpc3Rfc29uZ3MiLCJwcyIsInNvbmdDb3VudCIsInRvZ2dsZUxpa2UiLCJzb25nSWQiLCJzb25nRmlsZUlkIiwicGFyc2VJbnQiLCJpc0N1cnJlbnRseUxpa2VkIiwiZGVsZXRlIiwicnBjIiwic29uZ19maWxlX2lkIiwicHJldiIsIm5ld1NldCIsImluc2VydCIsInVzZXJfaWQiLCJhZGQiLCJwcmV2U29uZ3MiLCJwcmV2UGxheWxpc3RzIiwiY3JlYXRlUGxheWxpc3QiLCJuZXdQbGF5bGlzdCIsImRlbGV0ZVBsYXlsaXN0IiwicGxheWxpc3RJZCIsInJlbmFtZVBsYXlsaXN0IiwibmV3TmFtZSIsInVwZGF0ZSIsImFkZFNvbmdUb1BsYXlsaXN0IiwicGxheWxpc3RfaWQiLCJzb25nRXhpc3RzIiwic29tZSIsInMiLCJ1cGRhdGVkU29uZ3MiLCJyZW1vdmVTb25nRnJvbVBsYXlsaXN0IiwidXBkYXRlTGFzdFNvbmciLCJyZWNvcmRMaXN0ZW5pbmdIaXN0b3J5IiwiY3VycmVudCIsImVuZFRpbWUiLCJEYXRlIiwibWludXRlc0xpc3RlbmVkIiwiZ2V0VGltZSIsIm1pbnV0ZXMiLCJyb3VuZCIsInVzZXJfdXVpZCIsInN0b3BDdXJyZW50U29uZ1RyYWNraW5nIiwibG9hZERhdGEiLCJQcm9taXNlIiwiYWxsIiwicmVmcmVzaERhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useSupabaseData.ts\n"));

/***/ })

});